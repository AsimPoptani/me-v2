{"version":3,"sources":["imgs/me.jpeg","comp/carousel/Carousel.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","carousel","props","cards","content","forEach","card","console","warn","push","Card","CardContent","className","R","id","src","alt","ArrowBackRounded","fontSize","ArrowForwardRounded","App","imageMe","title","summary","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,iC,sQCK5B,SAASC,EAASC,GAAO,IAM5BC,EAAUD,EAAVC,MACJC,EAAU,GAOd,OALAD,EAAME,SAAQ,SAACC,GACXC,QAAQC,KAAKF,GACbF,EAAQK,KAAK,kBAACC,EAAA,EAAD,KAAM,kBAACC,EAAA,EAAD,KAAa,uBAAGC,UAAU,aAAaC,IAAO,QAASP,IAAU,yBAAKQ,GAAG,OAAOC,IAAKF,IAAO,CAAC,QAAS,OAAQP,GAAOU,IAAKH,IAAO,CAAC,QAAS,OAAQP,KAAS,2BAAIO,IAAO,UAAWP,UAIrM,kBAACI,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,yBAAKG,GAAG,YAEJ,yBAAKF,UAAU,SACX,kBAACK,EAAA,EAAD,CAAkBC,SAAS,WAG/B,yBAAKJ,GAAG,WACHV,GAUL,yBAAKQ,UAAU,SACX,kBAACO,EAAA,EAAD,CAAqBD,SAAS,cC8BvCE,MA1Df,WAQE,OACE,yBAAKN,GAAG,QACN,yBAAKF,UAAU,iBACb,uBAAGA,UAAU,SAAb,gBACA,yBAAKE,GAAG,UAAUC,IAAKM,IAASL,IAAI,+BACpC,uBAAGF,GAAG,aAAN,qDAAoE,6BAAK,6DAG3E,yBAAKF,UAAU,gBACb,uDAEF,yBAAKA,UAAU,iBACb,0CACA,kBAAC,EAAD,CAAST,MAnBF,CACX,CACEmB,MAAO,OACPC,QAAS,gBAuBP,mCACA,sCAEF,yBAAKX,UAAU,gBACb,sCACA,sCACA,uCAEF,yBAAKA,UAAU,iBACb,6CAEF,yBAAKA,UAAU,gBACb,mDAEF,yBAAKA,UAAU,iBACb,uDAEF,yBAAKA,UAAU,gBACb,oDAEF,yBAAKA,UAAU,iBACb,yCACA,2EAEF,yBAAKE,GAAG,aCpDMU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlC,QAAQkC,MAAMA,EAAMC,c","file":"static/js/main.6b62b3ed.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/me.55a39091.jpeg\";","import React from 'react'\nimport { ArrowBackRounded, ArrowForwardRounded } from '@material-ui/icons'\nimport './Carousel.css'\nimport { Card, CardContent } from '@material-ui/core'\nimport * as R from 'ramda'\nexport default function carousel(props) {\n    // get a list of cards\n    // A card has the following propeties:\n    // Title\n    // Logo\n    // Summary \n    const { cards } = props;\n    let content = [];\n\n    cards.forEach((card) => {\n        console.warn(card)\n        content.push(<Card><CardContent><p className=\"cardTitle\">{R.prop('title', card)}</p><img id=\"icon\" src={R.path(['image', 'src'], card)} alt={R.path(['image', 'alt'], card)} /><p>{R.prop('summary', card)}</p></CardContent></Card>)\n    })\n\n    return (\n        <Card>\n            <CardContent>\n                <div id=\"carousel\">\n                    {/* This is where we will place the arrow left */}\n                    <div className=\"arrow\">\n                        <ArrowBackRounded fontSize=\"large\" />\n                    </div>\n                    {/* This is space for the cards */}\n                    <div id=\"content\">\n                        {content}\n                        {/* <Card><CardContent></CardContent></Card>\n                        <Card><CardContent></CardContent></Card>\n                        <Card><CardContent></CardContent></Card>\n                        <Card><CardContent></CardContent></Card>\n                        <Card><CardContent></CardContent></Card>\n                        <Card><CardContent></CardContent></Card>\n                        <Card><CardContent></CardContent></Card> */}\n                    </div>\n                    {/* This is the space for the arrow right */}\n                    <div className=\"arrow\">\n                        <ArrowForwardRounded fontSize=\"large\" />\n                    </div>\n                </div>\n            </CardContent>\n        </Card>\n    )\n}\n","import React from 'react';\nimport './App.css';\nimport imageMe from './imgs/me.jpeg'\nimport Carosel from './comp/carousel/Carousel'\n// Colours\n// #9CAFB7\n// #6BD425\n// #B27C66\n// #352D39\n// #183059\n\n\nfunction App() {\n\n  const skills=[\n    {\n      title: \"Java\",\n      summary: \"Love Java\",\n    },\n  ]\n  return (\n    <div id='page'>\n      <div className=\"section light\" >\n        <p className='title'>Asim Poptani</p>\n        <img id=\"imageMe\" src={imageMe} alt=\"A pictiure of Asim Poptani\"/>\n        <p id=\"strapline\">Brain: an apparatus with which we think we think. <br/><u>Ambrose Bierce (1842 - 1914)</u></p>\n        \n      </div>\n      <div className=\"section dark\">\n        <p>Strange/Awesome stories</p>\n      </div>\n      <div className=\"section light\">\n        <p>Main Skills</p>\n        <Carosel cards={skills}/>\n        {/* <Card>\n          <CardContent>\n            <AccessAlarm/>\n            Hello\n          </CardContent>\n          </Card> */}\n        <p>Java</p>\n        <p>NodeJs</p>\n      </div>\n      <div className=\"section dark\">\n        <p>Hobbies</p>\n        <p>Hobbies</p>\n        <p>Hobbies</p>\n      </div>\n      <div className=\"section light\">\n        <p>Previous jobs</p>\n      </div>\n      <div className=\"section dark\">\n        <p>What I have learned</p>\n      </div>\n      <div className=\"section light\">\n        <p>How I made this website</p>\n      </div>\n      <div className=\"section dark\">\n        <p>What am I doing now?</p>\n      </div>\n      <div className=\"section light\">\n        <p>Contact me</p>\n        <p> Find me on your favorite media platform :)</p>\n      </div>\n      <div id=\"footer\"></div>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}